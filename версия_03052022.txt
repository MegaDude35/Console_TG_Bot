using System;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Extensions.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Args;

namespace Console_TelegramBot
{
    class Program
    {

        static ITelegramBotClient bot = new TelegramBotClient("TOKEN");
        private static PollType? keyboard;
        const string command_List=
        @"Список команд:
        /add <eng> <ru> - Добавление английского слова и его перевод в словарь
        /get - Получаем случайное английское слово из словаря
        /check <eng> <ru> - Проверяем правильность перевода английского слова
        ";


        public static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            

            if (update.Type != Telegram.Bot.Types.Enums.UpdateType.Message|| update.Message==null || update.Message.Text==null)
                return;

            if (update.Message.Type == MessageType.Sticker)
            {
                await botClient.SendTextMessageAsync(update.Message.Chat, update.Message.Sticker.Emoji);
                return;
            }


            var message = update.Message;
            var chatId = message.Chat.Id;
            var messageText = message.Text;


            ReplyKeyboardMarkup replyKeyboardMarkup = new(new[]
            {
                new KeyboardButton[] { "Добавить вопрос", "Вызвать опрос" },
            })
            {
                ResizeKeyboard = true
            };



            switch (messageText)
            {

                case "/start":
                {
                        Message sentMessage = await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "Привет, что делаем? ",
                        replyMarkup: replyKeyboardMarkup,
                        cancellationToken: cancellationToken);

                        break;
                }
                case "Вызвать опрос":
                    {

                        Message pollMessage = await botClient.SendPollAsync(
                        chatId: chatId,
                        question: "Твой любимый цвет?",
                        options: new[]
                        {
                        "Красный",
                        "Синий"
                        },
                        cancellationToken: cancellationToken);


                        break;
                    }

                case "/get":
                    await botClient.SendTextMessageAsync(message.From.Id, "get");
                    break;
                case "/check":
                    await botClient.SendTextMessageAsync(message.From.Id, "check");
                    break;
            }
            //await botClient.SendTextMessageAsync(message.Chat, update.Message.Text);


        }

  



        public static async Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(exception));
        }


        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");


            bot = new TelegramBotClient(Config.apiKey);

            Console.WriteLine("Запущен бот " + bot.GetMeAsync().Result.FirstName);



            var cts = new CancellationTokenSource();
            var cancellationToken = cts.Token;
            var allowedUpdates = new UpdateType[] { UpdateType.Message };
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = allowedUpdates 
            };
            
            bot.StartReceiving(
                HandleUpdateAsync,
                HandleErrorAsync,
                receiverOptions,
                cancellationToken
            );




            Console.ReadLine();
            cts.Cancel();
        }


    }
}
